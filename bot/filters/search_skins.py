from middlewares.loader import skins_en, skins_ru
from aiogram import types
import re
from rapidfuzz import process, fuzz


# --- –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ ---
def normalize(text: str) -> str:
    if not text:
        return ""
    text = text.lower()
    text = text.replace("—ë", "–µ")
    text = re.sub(r'[¬´¬ª"\'`|]', ' ', text)  # ‚Üê –∑–∞–º–µ–Ω—è–µ–º | –Ω–∞ –ø—Ä–æ–±–µ–ª
    text = re.sub(r'\s+', ' ', text)  # —Å—Ö–ª–æ–ø—ã–≤–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
    return text.strip()


# --- —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∫–∏–Ω–∞/–∫–µ–π—Å–∞ ---
async def get_skin_id(skins_name: str, threshold=70):
    query = normalize(skins_name)

    is_cyrillic = any("–∞" <= c <= "—è" or "–ê" <= c <= "–Ø" for c in query)
    search_list = skins_ru if is_cyrillic else skins_en
    iterable = search_list.values() if isinstance(search_list, dict) else search_list

    # —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ (–∏–º–µ–Ω–∞ —Å–∫–∏–Ω–æ–≤ + –∏–º–µ–Ω–∞ –∫–µ–π—Å–æ–≤)
    search_choices = []
    lookup = {}  # —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –∑–Ω–∞—Ç—å, –∫–∞–∫–æ–π id –≤–µ—Ä–Ω—É—Ç—å

    for s in iterable:
        name = s.get("name", "")
        norm_name = normalize(name)
        search_choices.append(norm_name)
        lookup[norm_name] = s.get("id")
    # elif s.get("id").startswith('key'):
    #     for crate in s.get("crates", []):
    #         crate_name = crate.get("name", "")
    #         norm_crate_name = normalize(crate_name)
    #         search_choices.append(norm_crate_name)
    #         lookup[norm_crate_name] = crate.get("id")
    # elif s.get("id").startswith('graffiti'):
    #     name = s.get("name", "")
    #     norm_name = normalize(name)
    #     search_choices.append(norm_name)
    #     lookup[norm_name] = s.get("skin_id")

    # –∏—â–µ–º –ª—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é rapidfuzz
    best_match = process.extractOne(query, search_choices, scorer=fuzz.partial_ratio, score_cutoff=threshold)

    if best_match:
        match_text, score, _ = best_match
        return lookup[match_text]

    return None


async def skin_lang(skin_id, lang):
    skins = skins_en if lang == 'en' else skins_ru

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—è
    if isinstance(skins, dict):
        iterable = skins.values()
    else:
        iterable = skins

    for s in iterable:
        # and not
        if skin_id.lower() == s.get("id", "").lower():
            if s.get("id").startswith('collection'):

                for crate in s.get("crates", []):
                    if crate.get('id').startswith('crate'):
                        return "crates", s.get("crates")[0]
            if s.get("id").startswith('skin'):
                return "skin", s
            else:
                return 'other', s
        #
        #
        # elif s.get("id").startswith('key') and skin_id.lower() == s.get("id", "").lower():
        #     for crate in s.get("crates", []):
        #         if skin_id.lower() == crate.get("id", "").lower():
        #             return "case", crate
        # elif s.get("id").startswith('graffiti') and skin_id.lower() == s.get("id", "").lower():
        #     if skin_id.lower() == s.get("id", "").lower():
        #         return "graffiti", s
    return None, None


async def get_skin(skin_id, lang):
    type, skins_data_en = await skin_lang(skin_id, 'en')
    if not type or not skins_data_en:
        # print(f"‚ö†Ô∏è skin_lang –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {skin_id}")
        return None
    # if type == 'skin':
    #     name_for_request = f"{skins_data_en.get('weapon').get('name')} | {skins_data_en.get('pattern').get('name')}"
    # else:
    name_for_request = skins_data_en.get('name')
    clean_name_for_request = re.sub(r"\s*\(.*?\)", "", name_for_request).strip()
    type, skins_data = await skin_lang(skin_id, lang)

    if not skins_data:
        return None, name_for_request, None, None
    # print(skins_data)

    # if type == 'skin':
    #     weapon = skins_data.get('weapon').get('name')
    #     pattern = skins_data.get('pattern').get('name')
    #      # –∫–µ–π—Å—ã –º–æ–≥—É—Ç –Ω–µ –∏–º–µ—Ç—å description
    #     show_name = f"{weapon} | {pattern}"
    # else:
    show_name = skins_data.get('name')
    clean_name = re.sub(r"‚òÖ|\s*\(.*?\)", "", show_name).strip()

    descr = skins_data.get('description', '')
    image = skins_data.get('image')
    descr = (descr or "").replace('\\r\\n', '\n').replace('\\n', '\n').replace("<br>", "\n")
    # rarity_data = skins_data.get('rarity')
    # rarity = rarity_data.get('name') if rarity_data else None
    rarity_data_en =skins_data_en.get('rarity')
    rarity_en = rarity_data_en.get('name') if rarity_data_en else None

    # return type, image, clean_name_for_request, clean_name, descr
    return {
        "skin_id": skin_id,
        "type": type,
        "image": image,
        "req_name": clean_name_for_request,
        "show_name": clean_name,
        "descr": descr,
        "rarity": f"{rarity_translate[lang].get(rarity_en)}"
    }


lang = {
    "ru": {
        'Factory New': '–ü—Ä—è–º–æ —Å –∑–∞–≤–æ–¥–∞',
        'Minimal Wear': '–ù–µ–º–Ω–æ–≥–æ –ø–æ–Ω–æ—à–µ–Ω–Ω–æ–µ',
        'Field-Tested': '–ü–æ—Å–ª–µ –ø–æ–ª–µ–≤—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏–π',
        'Well-Worn': '–ü–æ–Ω–æ—à–µ–Ω–Ω–æ–µ',
        'Battle-Scarred': '–ó–∞–∫–∞–ª—ë–Ω–Ω–æ–µ –≤ –±–æ—è—Ö'
    }
}


rarity_translate ={
    'ru':{
        'Consumer Grade': 'ü§ç–®–∏—Ä–ø–æ—Ç—Ä–µ–±',  # —à–∏—Ä–ø–æ—Ç—Ä–µ–±
        'Industrial Grade': 'ü©µ–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ –∫–∞–∫—á–µ—Å—Ç–≤–æ',  # –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ –∫–∞–∫—á–µ—Å—Ç–≤–æ
        'Mil-Spec Grade': 'üíô–ê—Ä–º–µ–π—Å–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ',  # –∞—Ä–º–µ–π—Å–∫–∏–µ
        'Restricted': 'üíú–ó–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ',  # –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ
        'Classified': 'ü©∑–ó–∞—Å–µ–∫—Ä–µ—á–µ–Ω–Ω–æ–µ ',  # –∑–∞—Å–µ–∫—Ä–µ—á–µ–Ω–Ω–æ–µ
        'Covert': '‚ù§Ô∏è–¢–∞–π–Ω–æ–µ',  # —Ç–∞–π–Ω–æ–µ
        'Extraordinary': 'üíõ–†–µ–¥–∫–æ–µ',  # –∫—Ä–∞–π–Ω–µ —Ä–µ–¥–∫–∏–π –ø—Ä–µ–¥–º–µ—Ç –∏–ª–∏ –∫–æ–Ω—Ç—Ä–∞–±–∞–Ω–¥–Ω–æ–µ
        'Contraband': 'üß°Contraband'  # –ö–æ–Ω—Ç—Ä–∞–±–∞–Ω–¥–∞
    },
    'en': {
        'Consumer Grade': 'ü§çConsumer Grade',  # —à–∏—Ä–ø–æ—Ç—Ä–µ–±
        'Industrial Grade': 'ü©µIndustrial Grade',  # –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ –∫–∞–∫—á–µ—Å—Ç–≤–æ
        'Mil-Spec Grade': 'üíôMil-Spec',  # –∞—Ä–º–µ–π—Å–∫–∏–µ
        'Restricted': 'üíúRestricted',  # –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ
        'Classified': 'ü©∑Classified ',  # –∑–∞—Å–µ–∫—Ä–µ—á–µ–Ω–Ω–æ–µ
        'Covert': '‚ù§Ô∏èCovert',  # —Ç–∞–π–Ω–æ–µ
        'Extraordinary': 'üíõExceedingly Rare',  # –∫—Ä–∞–π–Ω–µ —Ä–µ–¥–∫–∏–π –ø—Ä–µ–¥–º–µ—Ç –∏–ª–∏ –∫–æ–Ω—Ç—Ä–∞–±–∞–Ω–¥–Ω–æ–µ
        'Contraband': 'üß°–ö–æ–Ω—Ç—Ä–∞–±–∞–Ω–¥–Ω–æ–µ'  # –ö–æ–Ω—Ç—Ä–∞–±–∞–Ω–¥–∞
    }
}

rarity_color = {
        'Consumer Grade':'',#—à–∏—Ä–ø–æ—Ç—Ä–µ–±
        'Industrial Grade':'',#–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ –∫–∞–∫—á–µ—Å—Ç–≤–æ
        'Mil-Spec Grade':'', #–∞—Ä–º–µ–π—Å–∫–∏–µ
        'Restricted':'',#–∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ
        'Classified':'',#–∑–∞—Å–µ–∫—Ä–µ—á–µ–Ω–Ω–æ–µ
        'Covert':'',#—Ç–∞–π–Ω–æ–µ
        'Extraordinary':'',#–∫—Ä–∞–π–Ω–µ —Ä–µ–¥–∫–∏–π –ø—Ä–µ–¥–º–µ—Ç –∏–ª–∏ –∫–æ–Ω—Ç—Ä–∞–±–∞–Ω–¥–Ω–æ–µ
        'Contraband':''#–ö–æ–Ω—Ç—Ä–∞–±–∞–Ω–¥–∞

    }